generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Address {
  id         Int      @id @default(autoincrement())
  userId     Int
  street     String
  houseno    String
  city       String
  state      String?
  postalCode String?
  country    String?
  createdAt  DateTime @default(now())
  isDefault  Boolean  @default(false)
  updatedAt  DateTime
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Address_userId_fkey")
}

model BlogPost {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  content     String
  image       String?
  author      String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model Cart {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Cart_productId_fkey")
  @@index([userId], map: "Cart_userId_fkey")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Product   Product[]
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  userId    Int?
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "ContactMessage_userId_fkey")
}

model Coupon {
  id            Int             @id @default(autoincrement())
  code          String          @unique
  type          String
  value         Float
  usageLimit    Int?
  usedCount     Int             @default(0)
  startsAt      DateTime?
  endsAt        DateTime?
  createdAt     DateTime        @default(now())
  productId     Int?
  userId        Int?
  Product       Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  User          User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  CouponProduct CouponProduct[]
  CouponUser    CouponUser[]
  Order         Order[]

  @@index([productId], map: "Coupon_productId_fkey")
  @@index([userId], map: "Coupon_userId_fkey")
}

model CouponProduct {
  id        Int     @id @default(autoincrement())
  couponId  Int
  productId Int
  Coupon    Coupon  @relation(fields: [couponId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([couponId], map: "CouponProduct_couponId_fkey")
  @@index([productId], map: "CouponProduct_productId_fkey")
}

model CouponUser {
  id       Int    @id @default(autoincrement())
  couponId Int
  userId   Int
  Coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  User     User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([couponId], map: "CouponUser_couponId_fkey")
  @@index([userId], map: "CouponUser_userId_fkey")
}

model Discount {
  id        Int       @id @default(autoincrement())
  productId Int
  type      String
  value     Float
  startsAt  DateTime?
  endsAt    DateTime?
  createdAt DateTime  @default(now())
  Product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Discount_productId_fkey")
}

model InvalidatedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Order {
  id                 Int                  @id @default(autoincrement())
  userId             Int
  totalAmount        Float
  discountTotal      Float?
  finalAmount        Float
  status             String               @default("pending")
  couponId           Int?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  paymentMethod      String?
  Coupon             Coupon?              @relation(fields: [couponId], references: [id])
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderItem          OrderItem[]
  PaymentTransaction PaymentTransaction[]
  ReturnRequest      ReturnRequest[]

  @@index([couponId], map: "Order_couponId_fkey")
  @@index([userId], map: "Order_userId_fkey")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  subtotal  Float
  Order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  Product   Product @relation(fields: [productId], references: [id])

  @@index([orderId], map: "OrderItem_orderId_fkey")
  @@index([productId], map: "OrderItem_productId_fkey")
}

model PaymentTransaction {
  id            Int                         @id @default(autoincrement())
  orderId       Int
  provider      PaymentTransaction_provider
  amount        Float
  status        String
  transactionId String?                     @unique
  createdAt     DateTime                    @default(now())
  Order         Order                       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "PaymentTransaction_orderId_fkey")
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String
  slug                String                @unique
  description         String?
  price               Float
  stock               Int                   @default(0)
  isFeatured          Boolean               @default(false)
  categoryId          Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Cart                Cart[]
  Coupon              Coupon[]
  CouponProduct       CouponProduct[]
  Discount            Discount[]
  OrderItem           OrderItem[]
  Category            Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ProductImage        ProductImage[]
  ProductTag          ProductTag[]
  Rating              Rating[]
  ReturnRequestDetail ReturnRequestDetail[]
  StockSubscription   StockSubscription[]
  Wishlist            Wishlist[]

  @@index([categoryId], map: "Product_categoryId_fkey")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId], map: "ProductImage_productId_fkey")
}

model ProductTag {
  productId Int
  tagId     Int
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  Tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@index([tagId], map: "ProductTag_tagId_fkey")
}

model Rating {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int      @default(5)
  review    String?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId], map: "Rating_productId_fkey")
  @@index([userId], map: "Rating_userId_fkey")
}

model ReturnRequest {
  id                  Int                   @id @default(autoincrement())
  orderId             Int
  userId              Int
  status              ReturnRequest_status  @default(PENDING)
  refundAmount        Float?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  Order               Order                 @relation(fields: [orderId], references: [id])
  User                User                  @relation(fields: [userId], references: [id])
  ReturnRequestDetail ReturnRequestDetail[]

  @@index([orderId], map: "ReturnRequest_orderId_fkey")
  @@index([userId], map: "ReturnRequest_userId_fkey")
}

model ReturnRequestDetail {
  id                       Int                        @id @default(autoincrement())
  returnRequestId          Int
  productId                Int
  reason                   String
  createdAt                DateTime                   @default(now())
  Product                  Product                    @relation(fields: [productId], references: [id])
  ReturnRequest            ReturnRequest              @relation(fields: [returnRequestId], references: [id])
  ReturnRequestDetailImage ReturnRequestDetailImage[]

  @@index([productId], map: "ReturnRequestDetail_productId_fkey")
  @@index([returnRequestId], map: "ReturnRequestDetail_returnRequestId_fkey")
}

model ReturnRequestDetailImage {
  id                    Int                 @id @default(autoincrement())
  returnRequestDetailId Int
  url                   String
  createdAt             DateTime            @default(now())
  ReturnRequestDetail   ReturnRequestDetail @relation(fields: [returnRequestDetailId], references: [id], onDelete: Cascade)

  @@index([returnRequestDetailId], map: "ReturnRequestDetailImage_returnRequestDetailId_fkey")
}

model StockSubscription {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@index([productId], map: "StockSubscription_productId_fkey")
  @@index([userId], map: "StockSubscription_userId_fkey")
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String       @unique
  ProductTag ProductTag[]
}

model Test {
  id   Int    @id @default(autoincrement())
  name String
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  name               String
  mobile             String?
  createdAt          DateTime            @default(now())
  isVerified         Boolean             @default(false)
  updatedAt          DateTime
  verificationToken  String?             @unique
  resetPasswordToken String?
  resetTokenExpiry   DateTime?
  refreshToken       String?
  isSubscribed       Boolean             @default(false)
  Address            Address[]
  Cart               Cart[]
  ContactMessage     ContactMessage[]
  Coupon             Coupon[]
  CouponUser         CouponUser[]
  Order              Order[]
  Rating             Rating[]
  ReturnRequest      ReturnRequest[]
  StockSubscription  StockSubscription[]
  Wishlist           Wishlist[]
}

model VisitorLog {
  id        Int      @id @default(autoincrement())
  ip        String
  city      String?
  region    String?
  country   String?
  userAgent String?
  referrer  String?
  path      String
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId], map: "Wishlist_productId_fkey")
}

enum PaymentTransaction_provider {
  COD
  PAYPAL
  BKASH
  NAGAD
  VISA
  MASTERCARD
}

enum ReturnRequest_status {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Int      @default(2)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
